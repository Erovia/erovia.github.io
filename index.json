[
{
	"uri": "/faq/",
	"title": "Frequently Asked Questions",
	"tags": [],
	"description": "",
	"content": "Quick answers to frequent questions.\n Q: I\u0026rsquo;d like to learn QMK, but don\u0026rsquo;t know where to start A: Follow the Syllabus\n Q: Do I need to code to be able to use QMK? A: Nope. A lot of people only use the Configurator. Even if someone decides to write code, usually they do it by adapting the examples in the documentation or other\u0026rsquo;s code.\n(All roads lead to Rome drashna\u0026rsquo;s userspace.)\n Q: What\u0026rsquo;s the relationship between VIA and QMK? A: VIA is a tool that allows you modify the keymap of your keyboard on the fly. The firmware on your keyboard will still be QMK.\n Q: How do I add VIA support for my board? A: If the board is already supported by QMK, the steps are the following:\n Create a new keymap for your board, called via Create a rules.mk file in this new keymap\u0026rsquo;s directory with VIA_ENABLE=yes in it Create the json file necessary for VIA to know how to handle the board  You can also enable the VIA functionality for your already existing keymap.\n  Q: I get bash: python3: command not found on Windows, what to do? A: Restart the MinGW terminal and make sure to start \u0026ldquo;MinGW 64bit\u0026rdquo; and not \u0026ldquo;MSYS\u0026rdquo;.\n Q: I ran qmk setup on Windows, but still get errors, what to do? A: Restart \u0026ldquo;MinGW 64bit\u0026rdquo; and run qmk doctor. If you still get errors ask for help.\n Q: QMK Configurator - where is the keymap.c? A: the Configurator no longer offers keymap.c, instead it provides a keymap.json. You have multiple possibilies with this file:\n convert it to keymap.c  qmk json2c /path/to/keymap.json -o keymap.c  compile it directly from the json  qmk compile /path/to/keymap.json  use it in place of keymap.c (see the Minivan VIA keymap for example)   Q: How do I use accented characters in QMK Configurator? A: It\u0026rsquo;s important to understand, that your keyboard does not send characters, but keycodes (actually scancodes, but for the sake of simplicity, let\u0026rsquo;s say they are the same thing). What this keycodes will represent, depends on the locale settings of your OS.\nLet\u0026rsquo;s say you\u0026rsquo;d like to type ß. The keycode for this letter in with German locale is the same is the -'s in the US English locale.\nSince Configurator uses the latter\u0026rsquo;s keycodes, if you assign KC_MINS to a key, it will output ß with your German locale.\nUse the content of the extra keymaps to find the necessary US English keycodes.\n  Q: I\u0026rsquo;ve flashed the wrong firmware and my keyboard is unresponsive. Did I kill it? A: Likely not. The bootloader should be intact on your keyboard, allowing you to flash the correct firmware. Resetting the board might be harder, though.\nLook for:\n a button on the underside of the PCB a pair of pins (usually labelled RESET) that can be shorted with a tweezer if none of the above is an option, you can also short the RST and GND pins on your board\u0026rsquo;s microcontroller (not recommended)  Shorting the pins on the microcontroller is potentially dangerous. Use it only as a last resort.\n  Q: Help, Control and CapsLock (or Alt and GUI) are swapped! A: You most likely activated a bootmagic functionality. Check the docs for the key that can swap them back.\n"
},
{
	"uri": "/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Erovia\u0026rsquo;s QMK Corner Some of you may know me from the subreddit or the QMK Discord. I\u0026rsquo;m the clueless fella who tries to help others regardless.\nMy plan with this site is to compliment the official QMK Documentation.\nWe will see how useful it turns out to be.\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/posts/",
	"title": "Posts",
	"tags": [],
	"description": "",
	"content": "Some topics need more space.\n  Testing Pull Requests  Why? Let\u0026rsquo;s face it, testing new features, bug fixes, etc is time consuming. But you can help. While it\u0026rsquo;s true that ultimately the Collaborators decide on things, any feedback is greatly appreciated and can help the whole project move forward. Knowing how to test PRs also allows you to use the stuff in them even before they get merged. How? It\u0026rsquo;s actually quite easy, but assuming you are familiar with git and how its branching works at the basic level.\n "
},
{
	"uri": "/snippets/",
	"title": "Small code snippets",
	"tags": [],
	"description": "",
	"content": "Here I collected some code snippets.\nYou can use these as pointers to implement your desired functionality.\n Multi-function rotary encoder Change the encoder\u0026rsquo;s behavour when it is pressed as a key.\nbool secondary_function = false; enum custom_keycodes { ENC_MODE = SAFE_RANGE }; // Define what encoder does depending on direction flag. void encoder_update_user(uint8_t index, bool clockwise) { if (clockwise) { if (secondary_function) { tap_code(KC_DOWN); } else { tap_code(KC_RIGHT); } } else { if (secondary_function) { tap_code(KC_UP); } else { tap_code(KC_LEFT); } } } // When custom keycode ENC_MODE is clicked, switch encoder direction bool process_record_user(uint16_t keycode, keyrecord_t *record) { switch (keycode) { case ENC_MODE: if (record-\u0026gt;event.pressed) { secondary_function = !secondary_function; } return false; // Skip all further processing of this key  default: return true; // Process all other keycodes normally  } }  Turn on Numlock for a specific layer And turn it off on other layers\nlayer_state_t layer_state_set_user(layer_state_t state) { switch (get_highest_layer(state)) { case _NUM: if (!host_keyboard_led_state().num_lock) { tap_code16(KC_NLCK); } break; default: // for any other layers, or the default layer  if (host_keyboard_led_state().num_lock) { tap_code16(KC_NLCK); } break; } return state; } Change the behaviour of one key by another This is really similar to the encoder one\nbool switcheroo = false; bool process_record_user(uint16_t keycode, keyrecord_t *record) { switch (keycode) { case CL_BS: if (record-\u0026gt;event.pressed) { switcheroo = !switcheroo; // Change CapsLock into BackSpace  } return false; // Skip all further processing of this key  case KC_CAPS: if (record-\u0026gt;event.pressed) { if (switcheroo) { tap_code(KC_CAPS); } else { tap_code(KC_BSPC); } return true; // Let QMK send the enter press/release events  default: return true; // Process all other keycodes normally  } } "
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/posts/testing/",
	"title": "Testing Pull Requests",
	"tags": [],
	"description": "",
	"content": "Why? Let\u0026rsquo;s face it, testing new features, bug fixes, etc is time consuming.\nBut you can help.\nWhile it\u0026rsquo;s true that ultimately the Collaborators decide on things, any feedback is greatly appreciated and can help the whole project move forward.\nKnowing how to test PRs also allows you to use the stuff in them even before they get merged.\nHow? It\u0026rsquo;s actually quite easy, but assuming you are familiar with git and how its branching works at the basic level.\nThere are also multiple ways to do this (as is usual with git), this is just my workflow\n  Make sure you have the upstream QMK repo available as a remote:\n[erovia@ws]$ git remote -v github git@github.com:Erovia/qmk_firmware.git (fetch) github git@github.com:Erovia/qmk_firmware.git (push) origin https://github.com/qmk/qmk_firmware.git (fetch) origin https://github.com/qmk/qmk_firmware.git (push) If not, run git remote add origin https://github.com/qmk/qmk_firmware.git.\n  Check the number of the PR. It\u0026rsquo;s the numbers after the title, like #1234\n[erovia@ws]$ git fetch origin pull/1234/head:review/1234 [erovia@ws]$ git checkout review/1234   You can call the local branch anything you like, I just usally call them review/\u0026lt;number\u0026gt; so I know what it was for even later.\n   Use the feature, rebase it on the master branch, try to break it\n// Run from the feature branch // This will place the changes in the current branch on top of the master branch [erovia@ws]$ git rebase master // Once you are done [erovia@ws]$ git checkout master [erovia@ws]$ git branch -D review/1234   Add your experiences to the PR.\nThere is a tab called \u0026ldquo;Files changed\u0026rdquo;, you can suggest changes there or approve the PR.\n  "
},
{
	"uri": "/tools/",
	"title": "Tools",
	"tags": [],
	"description": "",
	"content": "Both official and unofficial tools that can make working with QMK easier.\n QMK Configurator https://config.qmk.fm\nAwesome tool for anybody who does not need advanced funtionality, just an easy way to work on keymaps.\n kbfirmware.com -\u0026gt; mainline QMK converter https://noroadsleft.github.io/kbf_qmk_converter\nBehind the scenes, kbfirmware.com uses an ancient fork of QMK (3+ years old, afaik).\nTries to bring the code generated by kbfirmware.com up to standards.\nIt\u0026rsquo;s a great starting point to add support for boards that has kbfirmware json but not supported by mainline QMK.\n VID/PID usage info https://yanfali.github.io/qmk_usb_usage\nVendor and product IDs become a topic of conversation with VIA, since it uses these two values to indentify a board.\nPulls the usage data from the QMK API and allows filtering.\nUseful for those thinking about adding VIA support for their boards.\n Helix font editor https://helixfonteditor.netlify.app\nAllows you to upload a glcdfont.c file, edit it and save it back to C file. Useful for OLED-lovers.\n Logo editor https://joric.github.io/qle\nAnother useful tool for users of OLED screens.\n Combo generator https://codepen.io/mvaneijgen/full/LYEVQXp\nHandy tool for generating Combos.\n"
}]