[
{
	"uri": "/faq/",
	"title": "Frequently Asked Questions",
	"tags": [],
	"description": "",
	"content": "Quick answers to frequent questions.\n Q: I\u0026rsquo;d like to learn QMK, but don\u0026rsquo;t know where to start A: Follow the Syllabus\n Q: Do I need to code to be able to use QMK? A: Nope. A lot of people only use the Configurator. Even if someone decides to write code, usually they do it by adapting the examples in the documentation or other\u0026rsquo;s code.\n(All roads lead to Rome drashna\u0026rsquo;s userspace.)\n Q: What\u0026rsquo;s the relationship between VIA and QMK? A: VIA is a tool that allows you modify the keymap of your keyboard on the fly. The firmware on your keyboard will still be QMK.\n Q: How do I add VIA support for my board? A: If the board is already supported by QMK, the steps are the following:\n Create a new keymap for your board, called via Create a rules.mk file in this new keymap\u0026rsquo;s directory with VIA_ENABLE=yes in it Create the json file necessary for VIA to know how to handle the board  You can also enable the VIA functionality for your already existing keymap.\n  Q: I get bash: python3: command not found on Windows, what to do? A: Restart the MinGW terminal and make sure to start \u0026ldquo;MinGW 64bit\u0026rdquo; and not \u0026ldquo;MSYS\u0026rdquo;.\n Q: I ran qmk setup on Windows, but still get errors, what to do? A: Restart \u0026ldquo;MinGW 64bit\u0026rdquo; and run qmk doctor. If you still get errors ask for help.\n Q: QMK Configurator - where is the keymap.c? A: the Configurator no longer offers keymap.c, instead it provides a keymap.json. You have multiple possibilies with this file:\n convert it to keymap.c  qmk json2c /path/to/keymap.json -o keymap.c  compile it directly from the json  qmk compile /path/to/keymap.json  use it in place of keymap.c (see the Minivan VIA keymap for example)   Q: How do I use accented characters in QMK Configurator? A: It\u0026rsquo;s important to understand, that your keyboard does not send characters, but keycodes (actually scancodes, but for the sake of simplicity, let\u0026rsquo;s say they are the same thing). What this keycodes will represent, depends on the locale settings of your OS.\nLet\u0026rsquo;s say you\u0026rsquo;d like to type ß. The keycode for this letter in with German locale is the same is the -\u0026rsquo;s in the US English locale.\nSince Configurator uses the latter\u0026rsquo;s keycodes, if you assign KC_MINS to a key, it will output ß with your German locale.\nUse the content of the extra keymaps to find the necessary US English keycodes.\n  Q: I\u0026rsquo;ve flashed the wrong firmware and my keyboard is unresponsive. Did I kill it? A: Likely not. The bootloader should be intact on your keyboard, allowing you to flash the correct firmware. Resetting the board might be harder, though.\nLook for:\n a button on the underside of the PCB a pair of pins (usually labelled RESET) that can be shorted with a tweezer if none of the above is an option, you can also short the RST and GND pins on your board\u0026rsquo;s microcontroller (not recommended)  Shorting the pins on the microcontroller is potentially dangerous. Use it only as a last resort.\n  Q: Help, Control and CapsLock (or Alt and GUI) are swapped! A: You most likely activated a bootmagic functionality. Check the docs for the key that can swap them back.\n"
},
{
	"uri": "/posts/workflow/",
	"title": "My personal workflow for QMK",
	"tags": [],
	"description": "",
	"content": "Let\u0026rsquo;s be honest, git can be intimidating.\nWhile it\u0026rsquo;s true that git is an extremely powerful tool, most users can get by with only using a handful of subcommands.\nI recommend the book Pro Git for everyone really interesed in git.\nSo, let\u0026rsquo;s see how I usually handle my QMK stuff, while keeping them up-to-date, too.\nEvery command need to be executed from your qmk_firmware directory!\n Setting things up This part you only need to do once.\nSo, if you followed the official getting started guide, which you should, this should be the output of running git remote -v:\n[erovia@ws]$ git remote -v origin https://github.com/qmk/qmk_firmware.git (fetch) origin https://github.com/qmk/qmk_firmware.git (push) Create a personal fork of the official repo.\n Log into your Github account Go to https://github.com/qmk/qmk_firmware Click on the \u0026ldquo;Fork\u0026rdquo; button  Add your fork as a remote and create a branch where you will be commiting your changes:\n[erovia@ws]$ git remote add myfork git@github.com:\u0026lt;your_github_username\u0026gt;/qmk_firmware.git [erovia@ws]$ git checkout -b my_stuff -t my_fork/my_stuff  You can name the remote and the branch anything you\u0026rsquo;d like, \u0026lsquo;myfork\u0026rsquo; and \u0026lsquo;my_stuff\u0026rsquo; were just an example.\n Check if both remotes are available:\n[erovia@ws]$ git remote -v origin https://github.com/qmk/qmk_firmware.git (fetch) origin https://github.com/qmk/qmk_firmware.git (push) myfork git@github.com:Erovia/qmk_firmware.git (fetch) myfork git@github.com:Erovia/qmk_firmware.git (push) Working on your stuff This is what I usually do on a more or less daily basis.\nAdding things If you\u0026rsquo;d like to work on your keymap/userspace/custom board.\n[erovia@ws]$ git checkout my_stuff # make sure I\u0026#39;m on the personal branch # do my magic # you know, new keymaps and the like [erovia@ws]$ git add keyboards/example/keymaps/erovia/keymap.c # add the new/modified files to the staging area [erovia@ws]$ git commit -m \u0026#39;My new shiny keymap\u0026#39; # commit the changes with a nice message [erovia@ws]$ git push # push the changes to my Github fork  You can git add multiple files or even whole directories and have their changes in one commit.\n Always commit your custom stuff into your own branch(es) or there will be dragons.\n Updating [erovia@ws]$ git checkout master # make sure I\u0026#39;m on the master branch [erovia@ws]$ git pull # update master with the new goodies [erovia@ws]$ git checkout my_stuff # go back to my personal branch [erovia@ws]$ git rebase master # rebase my stuff on top of the newly updated master As long as you keep you don\u0026rsquo;t modify things outside your keymap/userspace/custom board, this will allow you to update QMK without any difficulties.\n"
},
{
	"uri": "/posts/thk/",
	"title": "Planck Through Hole Kit Build log",
	"tags": [],
	"description": "",
	"content": "The Planck Through Hole Kit The Planck Through Hole Kit (THK) was announced by Jack Humbert on the /r/olkb subreddit on 2018.10.01.\nThe hardware was released under GPLv3 with the intention to be accessible to everyone.\nThe original QMK pull request never got merged and documentation/information about the board is scarce.\nAs QMK is a pretty fast-moving project, the original code for the keyboard did not build with new QMK.\nI first heard about this keyboard when a community member tried to flash his board and asked for help.\nSadly, I was not able to work out all the things without having access to the hardware and my abition to make it work again had to be put on hold.\nUntil Jack was kind enough to send my two unassembled kits.\nNow I have the hardware fully working with mainline QMK so I thought I\u0026rsquo;ll document a process of building and compiling and flashing this board.\nHardware The gerber files for the PCB and the bottom case can be downloaded from the OLKB GitHub.\nThat repo also has a nice link to the bill of materials (BOM) for all the components needed for the assembly.\nOf course, most can be substituted with similar parts from the local store, dad\u0026rsquo;s shed or Aliexpress.\nAs the BOM has the \u0026ldquo;Schematic Reference\u0026rdquo; field filled in for all components, building the board is quite easy.\nWhen soldering the LEDs, the cathode (shorter leg) should face the USB port.\n The BOM for future reference:    Qty Line Item Manufacturer MPN Octopart URL Schematic Reference     1 UB-M5BR-DM14-4D JST UB-M5BR-DM14-4D https://octopart.com/ub-m5br-dm14-4d-jst-54155138 USB PORT   1 TP124005-2 DB Unlimited TP124005-2 https://octopart.com/tp124005-2-db+unlimited-59659708 SPEAKER   48 1N4151TR Vishay 1N4151TR https://octopart.com/1n4151tr-vishay-9342963 D*   1 1301.9303 Schurter 1301.9303 https://octopart.com/1301.9303-schurter-5416046 RESET   1 ECS-160-20-4VX ECS International ECS-160-20-4VX https://octopart.com/ecs-160-20-4vx-ecs+international-19118787 Y1   1 S5B-PH-K-S(LF)(SN) JST S5B-PH-K-S(LF)(SN) https://octopart.com/s5b-ph-k-s%28lf%29%28sn%29-jst-248886 ALT USB PORT   1 ATMEGA32A-PU Microchip ATMEGA32A-PU https://octopart.com/atmega32a-pu-microchip-77760288 MICROCONTROLLER   1 1-2199299-5 TE Connectivity 1-2199299-5 https://octopart.com/1-2199299-5-te+connectivity-34963610 MICROCONTROLLER SOCKET   1 LD1117AV33 STMicroelectronics LD1117AV33 https://octopart.com/ld1117av33-stmicroelectronics-526794 POWER REGULATOR   3 s04b-sz JST S04B-SZ https://octopart.com/s04b-sz-jst-87088753 I2C   1 210-4ES CTS Components 210-4ES https://octopart.com/210-4es-cts+components-19788403 DIP SWITCH   1 67997-410HLF Amphenol ICC / FCI 67997-410HLF https://octopart.com/67997-410hlf-amphenol+icc+%2F+fci-90333672 JTAG HEADER   1 68602-406HLF Amphenol ICC / FCI 68602-406HLF https://octopart.com/68602-406hlf-amphenol+icc+%2F+fci-90340423 ISP HEADER   4 CFR-25JT-52-68R Yageo CFR-25JT-52-68R https://octopart.com/cfr-25jt-52-68r-yageo-16252182 R1, R2, R4, R5   1 LTL-4222 Lite-On LTL-4222 https://octopart.com/ltl-4222-lite-on-869424 PWR   1 LTL-4232 Lite-On LTL-4232 https://octopart.com/ltl-4232-lite-on-868849 ACT   1 SR595C104KARTR1 AVX SR595C104KARTR1 https://octopart.com/sr595c104kartr1-avx-2348402 C3   2 SR151A200JAR AVX SR151A200JAR https://octopart.com/sr151a200jar-avx-20091099 C1, C2   1 FK18X5R1A475K TDK FK18X5R1A475K https://octopart.com/fk18x5r1a475k-tdk-21525622 C4   2 PEC12R-4217F-N0024 Bourns PEC12R-4217F-N0024 https://octopart.com/pec12r-4217f-n0024-bourns-26648364 ENCODERS   1 CFR-25JT-52-1K5 Yageo CFR-25JT-52-1K5 https://octopart.com/cfr-25jt-52-1k5-yageo-16252146 R3    ISP Flashing The first time, you will need to ISP flash the microcontroller to set the fuses and flash the bootloader.\nThe QMK ISP flashing quide shows how you can use a spare ProMicro or Teensy as flasher, but I like my cheap USBasp I got off of Aliexpress.\nThe keyboard has a 6-pin ISP header which makes you think that you can just connect your 6-pin USBasp, but sadly the pins are mirrored on the board.\n My recommendation is to use female-to-male dupont cables for the connection.\nI set my USBasp to 3.3V, but it should work with 5V as well.\nIf everything is connected well, the power (red) LED should be on, your computer should recognize the USBasp and the flashing command below should work without any errors.\nIf you experience any issues, the first thing you check should be the correct pin connections.\nBootloader Originally, the bootloadHID bootloader was used for the THK as can be seen in the old branch and if someone would want that, the following gist can be of some help.\nPersonally, I think USBasp is a much nicer one as it can be used with avrdude and other, newer through hole boards use it as well.\nAs USBasp usually requires two buttons to reset the board, but the THK has only one, I chose a fork that has some nice features, like the ability to boot into bootloder with a reset button.\nI have a fork, pre-configured for the THK.\nSetting the fuses, compiling and flashing the bootloader is this simple:\n[erovia@ws]$ git clone https://github.com/Erovia/planck_thk_usbasploader.git [erovia@ws]$ cd planck_thk_usbasploader [erovia@ws]$ make fuse [erovia@ws]$ make flash Once done, disconnect the ISP flasher from the keyboard, connect the board to your computer and press the Reset button.\nIf everything went well, it should be recognized as an USBasp flasher.\nFirmware The firmware currently lives in my QMK fork, but I\u0026rsquo;ll get it merged upstream, to not repeat history.\nThe board should be compatible with most Planck and ortho4x12/planck_mit keymaps, but I created a thk one, to showcase it\u0026rsquo;s unique features.\n[erovia@ws]$ qmk flash -kb planck/thk -km thk Case Soon\u0026hellip;\n"
},
{
	"uri": "/posts/testing/",
	"title": "Testing Pull Requests",
	"tags": [],
	"description": "",
	"content": "Why? Let\u0026rsquo;s face it, testing new features, bug fixes, etc is time consuming.\nBut you can help.\nWhile it\u0026rsquo;s true that ultimately the Collaborators decide on things, any feedback is greatly appreciated and can help the whole project move forward.\nKnowing how to test PRs also allows you to use the stuff in them even before they get merged.\nHow? It\u0026rsquo;s actually quite easy, but assuming you are familiar with git and how its branching works at the basic level.\nThere are also multiple ways to do this (as is usual with git), this is just my workflow\n  Make sure you have the upstream QMK repo available as a remote:\n[erovia@ws]$ git remote -v github git@github.com:Erovia/qmk_firmware.git (fetch) github git@github.com:Erovia/qmk_firmware.git (push) origin https://github.com/qmk/qmk_firmware.git (fetch) origin https://github.com/qmk/qmk_firmware.git (push) If not, run git remote add origin https://github.com/qmk/qmk_firmware.git.\n  Check the number of the PR. It\u0026rsquo;s the numbers after the title, like #1234\n[erovia@ws]$ git fetch origin pull/1234/head:review/1234 [erovia@ws]$ git checkout review/1234   You can call the local branch anything you like, I just usally call them review/\u0026lt;number\u0026gt; so I know what it was for even later.\n   Use the feature, rebase it on the master branch, try to break it\n// Run from the feature branch // This will place the changes in the current branch on top of the master branch [erovia@ws]$ git rebase master // Once you are done [erovia@ws]$ git checkout master [erovia@ws]$ git branch -D review/1234   Add your experiences to the PR.\nThere is a tab called \u0026ldquo;Files changed\u0026rdquo;, you can suggest changes there or approve the PR.\n  "
},
{
	"uri": "/posts/contributing/",
	"title": "Contributing",
	"tags": [],
	"description": "",
	"content": "This is a pretty basic and easy to understand workflow to work on keyboards, keymaps, features or anything in general that you intend to get merged.\nFor things that\u0026rsquo;s for your personal use only, check out my general workflow.\nOne of the best things about git is it\u0026rsquo;s branching. It\u0026rsquo;s fast and allows us to experiment without risking our code.\nFirst things first, read the official QMK Contributor guidelines in its entirety.\nBranch when in doubt, branch\n[erovia@ws]$ git checkout master # make sure I\u0026#39;m on the master branch [erovia@ws]$ git pull # making sure my local master branch is up to date [erovia@ws]$ git checkout -b new_feature # create a new branch for the new feature/keymap/keyboard # create new stuff # fix bugs # write documentation [erovia@ws]$ git status # make sure all the changes are committed [erovia@ws]$ git add file1 file2 fileN # if not, add the new/modified files to the staging area [erovia@ws]$ git commit -m \u0026#39;Your commit message\u0026#39; # commit the changes with a nice message [erovia@ws]$ git push -u myfork new_feature # push the changes to my fork Open the Pull Request (PR)   Go to https://www.github.com\n  Navigate to your qmk_firmware fork\n  Github will display a button to open a PR with your changes\n  Make sure the PR is from your fork\u0026rsquo;s new_feature branch to the official qmk_firmware repo\u0026rsquo;s master branch\n  Fill out the template and check in the Preview tab if it renders okay\n  Submit the PR\n  Wait patiently :)\n  Merge conflicts In some cases, someone else might have worked on the filed you changed. In this case a merge conflict will happen and you will be asked to resolve it.\nGithub will display conflicts at the button of the PR page.\n[erovia@ws]$ git checkout master # make sure I\u0026#39;m on the master branch [erovia@ws]$ git pull # making sure my local master branch is up to date [erovia@ws]$ git checkout new_feature # switch to the feature branch [erovia@ws]$ git rebase master # rebase our changes on the newly updated master # git will go from commit to commit in the changes # if a conflict is found, it will display the filenames # open the files with your favourite editor and look for the conflict indicators # # # \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD # the codeblock currently in master # ====== # the same codeblock in the new_feature branch # \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; 38472386162057 # # # remove the line you do not want to keep plus the markers [erovia@ws]$ git add file1 # mark the file or files as fixed [erovia@ws]$ git rebase --continue # continue the rebase # the process above has to be repeated for every commit that has conflict  The rebasing can be stopped at any minute with git rebase --abort.\n [erovia@ws]$ git push -f # push the changes to the new_feature branch on myfork, \u0026#39;-f\u0026#39; is needed, as history is rewritten "
},
{
	"uri": "/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Erovia\u0026rsquo;s QMK Corner Some of you may know me from the subreddit or the QMK Discord. I\u0026rsquo;m the clueless fella who tries to help others regardless.\nMy plan with this site is to compliment the official QMK Documentation.\nThis site has no trackers, so let me know if you found it to be useful. :)\nThings I\u0026rsquo;m working on\u0026hellip; No promises, this more like to motivate myself to get around doing these.\nAlso, this is not an exhaustive list.\n   Reviving the Planck THK\nI first heard about this keyboard when a community member tried to flash his board and asked for help.\nSadly, the code for this board was never merged and bitrot to the point of being incompatible with modern QMK.\nTrying to help, I\u0026rsquo;ve managed to forwardport the code, so it compiled and booted. Or rather I think it booted, as according to the user it played the startup sound, but typing did not work.\nI\u0026rsquo;d like to finish the work, but further debugging will require a kit, so if you have one (preferably unbuilt), let me know. ;)\nUpdate: Thanks to Jack, I got my hands on the hardware. I have it working, the code will just needs some finishing touches. I also plan on creating a build log, to document everything.\n  VIA keymap creation from CLI\nThe plan is to generate most of the things needed for adding VIA support with a simple command.\nIdeally, only the layout information will needed to be created by hand with KLE.\n  "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/posts/",
	"title": "Posts",
	"tags": [],
	"description": "",
	"content": "Some topics need more space.\n  My personal workflow for QMK  Let\u0026rsquo;s be honest, git can be intimidating. While it\u0026rsquo;s true that git is an extremely powerful tool, most users can get by with only using a handful of subcommands. I recommend the book Pro Git for everyone really interesed in git. So, let\u0026rsquo;s see how I usually handle my QMK stuff, while keeping them up-to-date, too. Every command need to be executed from your qmk_firmware directory! Setting things up This part you only need to do once.\n Planck Through Hole Kit Build log  The Planck Through Hole Kit The Planck Through Hole Kit (THK) was announced by Jack Humbert on the /r/olkb subreddit on 2018.10.01. The hardware was released under GPLv3 with the intention to be accessible to everyone. The original QMK pull request never got merged and documentation/information about the board is scarce. As QMK is a pretty fast-moving project, the original code for the keyboard did not build with new QMK.\n Testing Pull Requests  Why? Let\u0026rsquo;s face it, testing new features, bug fixes, etc is time consuming. But you can help. While it\u0026rsquo;s true that ultimately the Collaborators decide on things, any feedback is greatly appreciated and can help the whole project move forward. Knowing how to test PRs also allows you to use the stuff in them even before they get merged. How? It\u0026rsquo;s actually quite easy, but assuming you are familiar with git and how its branching works at the basic level.\n Contributing  This is a pretty basic and easy to understand workflow to work on keyboards, keymaps, features or anything in general that you intend to get merged. For things that\u0026rsquo;s for your personal use only, check out my general workflow. One of the best things about git is it\u0026rsquo;s branching. It\u0026rsquo;s fast and allows us to experiment without risking our code. First things first, read the official QMK Contributor guidelines in its entirety.\n "
},
{
	"uri": "/snippets/",
	"title": "Small code snippets",
	"tags": [],
	"description": "",
	"content": "Here I collected some code snippets.\nYou can use these as pointers to implement your desired functionality.\n Multi-function rotary encoder Change the encoder\u0026rsquo;s behavour when it is pressed as a key.\nbool secondary_function = false; enum custom_keycodes { ENC_MODE = SAFE_RANGE }; // Define what encoder does depending on direction flag. void encoder_update_user(uint8_t index, bool clockwise) { if (clockwise) { if (secondary_function) { tap_code(KC_DOWN); } else { tap_code(KC_RIGHT); } } else { if (secondary_function) { tap_code(KC_UP); } else { tap_code(KC_LEFT); } } } // When custom keycode ENC_MODE is clicked, switch encoder direction bool process_record_user(uint16_t keycode, keyrecord_t *record) { switch (keycode) { case ENC_MODE: if (record-\u0026gt;event.pressed) { secondary_function = !secondary_function; } return false; // Skip all further processing of this key  default: return true; // Process all other keycodes normally  } }  Multi-function, layer-aware rotary encoder Make the previous example work differently based on the active layer.\nYou will need the process_record_user function, the custom_keycodes enum and the secondary_function boolean from the previous example.\n enum layer_name { _BASE, _FN }; // Define what encoder does depending on direction flag. void encoder_update_user(uint8_t index, bool clockwise) { // the first encoder, in case you have more  if (index == 0) { if (layer_state_is(_BASE)) { if (clockwise) { if (secondary_function) { tap_code(KC_RIGHT); } else { tap_code(KC_UP); } } else { if (secondary_function) { tap_code(KC_LEFT); } else { tap_code(KC_DOWN); } } } else if (layer_state_is(_FN)) { if (clockwise) { if (secondary_function) { tap_code(KC_F12); } else { tap_code(KC_VOLU); } } else { if (secondary_function) { tap_code(KC_F11); } else { tap_code(KC_VOLD); } } } } }  Turn on Numlock for a specific layer And turn it off on other layers\nlayer_state_t layer_state_set_user(layer_state_t state) { switch (get_highest_layer(state)) { case _NUM: if (!host_keyboard_led_state().num_lock) { tap_code16(KC_NLCK); } break; default: // for any other layers, or the default layer  if (host_keyboard_led_state().num_lock) { tap_code16(KC_NLCK); } break; } return state; }  Change the behaviour of one key by another This is really similar to the encoder one\nbool switcheroo = false; bool process_record_user(uint16_t keycode, keyrecord_t *record) { switch (keycode) { case CL_BS: if (record-\u0026gt;event.pressed) { switcheroo = !switcheroo; // Change CapsLock into BackSpace  } return false; // Skip all further processing of this key  case KC_CAPS: if (record-\u0026gt;event.pressed) { if (switcheroo) { tap_code(KC_CAPS); } else { tap_code(KC_BSPC); } return true; // Let QMK send the enter press/release events  default: return true; // Process all other keycodes normally  } } "
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tools/",
	"title": "Tools",
	"tags": [],
	"description": "",
	"content": "Both official and unofficial tools that can make working with QMK easier.\n QMK Configurator https://config.qmk.fm\nAwesome tool for anybody who does not need advanced funtionality, just an easy way to work on keymaps.\n kbfirmware.com -\u0026gt; mainline QMK converter https://noroadsleft.github.io/kbf_qmk_converter\nBehind the scenes, kbfirmware.com uses an ancient fork of QMK (3+ years old, afaik).\nTries to bring the code generated by kbfirmware.com up to standards.\nIt\u0026rsquo;s a great starting point to add support for boards that has kbfirmware json but not supported by mainline QMK.\n VID/PID usage info https://yanfali.github.io/qmk_usb_usage\nVendor and product IDs become a topic of conversation with VIA, since it uses these two values to indentify a board.\nPulls the usage data from the QMK API and allows filtering.\nUseful for those thinking about adding VIA support for their boards.\n Helix font editor https://helixfonteditor.netlify.app\nAllows you to upload a glcdfont.c file, edit it and save it back to C file. Useful for OLED-lovers.\n Logo editor https://joric.github.io/qle\nAnother useful tool for users of OLED screens.\n Combo generator https://codepen.io/mvaneijgen/full/LYEVQXp\nHandy tool for generating Combos.\n"
}]